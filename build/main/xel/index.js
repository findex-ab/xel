"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mount = exports.X = exports.xRender = exports.xRender_x = exports.xRender_element = exports.xRender_function = exports.xRender_string = exports.xRender_number = exports.isXFunction = exports.isXElement = exports.isXElementLoaded = void 0;
const is_1 = require("./utils/is");
const css_1 = require("./utils/css");
const reactive_1 = require("./utils/reactivity/reactive");
const array_1 = require("./utils/array");
const hash_1 = require("./utils/hash");
const SVG_NS = "http://www.w3.org/2000/svg";
const isXElementLoaded = (x) => !!x && !!x.el;
exports.isXElementLoaded = isXElementLoaded;
const assignElement = (x, el) => {
    if (!(0, is_1.isHTMLElement)(el))
        return el;
    if (x.el) {
        x.el.replaceWith(el);
    }
    x.el = el;
    setAttributes(x, { state: x.state, x, el }, x.el);
    return x.el;
};
const addChild = (xel, child) => {
    child.getParent = () => xel;
    const existing = xel.children.find((child) => (0, exports.isXElement)(child) && child.uid === child.uid);
    if (existing) {
        assignElement(existing, child.el);
        const idx = xel.children.indexOf(existing);
        xel.children = xel.children.map((ch, i) => (i === idx ? child : ch));
    }
    else {
        xel.children = [...xel.children, child];
    }
};
const setAttribute = (x, el, key, value) => {
    if (!el.setAttribute)
        return;
    key = key.toString();
    if ([
        "render",
        "el",
        "magic",
        "state",
        "name",
        "initialState",
        "children",
    ].includes(key))
        return;
    if (key.startsWith("on") && (0, is_1.isFunction)(value)) {
        el.addEventListener(Array.from(key).splice(2).join(""), value);
        return 1;
    }
    if (key.startsWith("inner")) {
        try {
            el[key] = value;
        }
        catch (e) { }
        return;
    }
    if (key === "style" && (0, is_1.isHTMLElement)(el)) {
        const css = (0, css_1.cssPropsToString)(value);
        el.setAttribute("style", css);
        return;
    }
    if (key === "className" || key === "class") {
        el.className = (Array.isArray(value) ? value.join(" ") : value) + "";
        return;
    }
    const replaceAll = (haystack, needle, repl) => {
        while (true) {
            if (!haystack.includes(needle))
                break;
            haystack = haystack.replace(needle, repl);
        }
        return haystack;
    };
    if (key === "stylesheet" && (0, is_1.isHTMLElement)(el)) {
        const clazz = `.c-${x.uid}`;
        const csskeys = Object.keys(value);
        const specialKeys = csskeys.filter((ck) => ck.startsWith(":") || ck.includes("&"));
        const normalKeys = csskeys.filter((ck) => !specialKeys.includes(ck));
        const pseudoObjects = specialKeys
            .map((k) => {
            if (k.includes("&")) {
                return `${replaceAll(k, "&", clazz)} { ${(0, css_1.cssPropsToString)(value[k])} }`;
            }
            return `.c-${x.uid}${k} { ${(0, css_1.cssPropsToString)(value[k])} }`;
        })
            .join("\n");
        const normalObject = Object.assign({}, ...normalKeys.map((k) => ({ [k]: value[k] })));
        const styleID = `style-${x.uid}`;
        let styleEl = x.styleEl || document.getElementById(styleID);
        const exists = !!styleEl;
        styleEl = styleEl || document.createElement('style');
        styleEl.setAttribute('id', styleID);
        styleEl.innerText = `.c-${x.uid} {${(0, css_1.cssPropsToString)(normalObject)} }\n` + pseudoObjects;
        if (!exists) {
            document.head.append(styleEl);
        }
        //x.config.children = [
        //  ...(x.config.children || []),
        //  X("style", {
        //    type: "text/css",
        //    innerText:
        //      `.c-${x.uid} {${cssPropsToString(normalObject)} }\n` + pseudoObjects,
        //  }),
        //];
        return;
    }
    try {
        el.setAttribute(key, value);
    }
    catch (e) {
        console.error({ element: el });
        console.warn(e);
    }
};
const isXElement = (x) => !!x &&
    Array.isArray(x) === false &&
    typeof x === "object" &&
    !!x.magic &&
    x.magic === "x";
exports.isXElement = isXElement;
const isXFunction = (x) => (0, is_1.isFunction)(x);
exports.isXFunction = isXFunction;
const xRender_number = (x, callee) => document.createTextNode(`${x}`);
exports.xRender_number = xRender_number;
const xRender_string = (x, callee) => document.createTextNode(`${x}`);
exports.xRender_string = xRender_string;
const xRender_function = (x, callee) => {
    const f = x.bind(callee.x || {});
    const ret = f(callee.args || {}, callee.state, callee);
    if ((0, exports.isXElement)(ret) && callee.x) {
        addChild(callee.x, ret);
    }
    return (0, exports.xRender)(ret, callee);
};
exports.xRender_function = xRender_function;
const xRender_element = (x, callee) => x;
exports.xRender_element = xRender_element;
const pushClass = (attr, cls) => {
    if ((0, is_1.isString)(attr))
        return [`${attr} ${cls}`];
    if ((0, is_1.isArray)(attr))
        return [...attr, cls];
    return [cls];
};
const setAttributes = (x, callee, el) => {
    el = (el || x.el);
    if (!el || !(0, is_1.isHTMLElement)(el))
        return;
    callee = Object.assign(Object.assign({}, callee), { args: Object.assign(Object.assign({}, (callee.args || {})), (x.config || {})) });
    let attributes = Object.assign({}, (callee.args || {}));
    attributes.className = pushClass(attributes.className, `c-${x.uid}`).join(" ");
    for (const [key, value] of Object.entries(attributes)) {
        setAttribute(x, el, key, value);
    }
};
//class: `c-${x.uid}`
const xRender_x = (x, callee) => {
    var _a;
    callee = Object.assign(Object.assign({}, callee), { args: Object.assign(Object.assign({}, (callee.args || {})), (x.config || {})) });
    const tag = x.config.name || "div";
    const el = (0, is_1.isSvgTag)(tag)
        ? document.createElementNS(SVG_NS, tag)
        : document.createElement(tag);
    let attributes = Object.assign({}, (callee.args || {}));
    attributes.className = pushClass(attributes.className, `c-${x.uid}`).join(" ");
    for (const [key, value] of Object.entries(attributes)) {
        setAttribute(x, el, key, value);
    }
    const children = ((_a = callee.args) === null || _a === void 0 ? void 0 : _a.children) || x.config.children || [];
    for (const child of children) {
        const args = (0, exports.isXElement)(child) ? child.config || {} : {};
        if ((0, exports.isXElement)(child)) {
            addChild(x, child);
        }
        (0, exports.mount)(child, { callee: Object.assign(Object.assign({}, callee), { args: args }), target: el });
    }
    return assignElement(x, el);
};
exports.xRender_x = xRender_x;
const isVNode = (value) => {
    return value ? value.__v_isVNode === true : false;
};
const xRender_ = (x, callee = { state: {} }) => {
    if ((0, exports.isXFunction)(x))
        return (0, exports.xRender_function)(x, callee);
    if ((0, is_1.isNumber)(x))
        return (0, exports.xRender_number)(x, callee);
    if ((0, is_1.isString)(x))
        return (0, exports.xRender_string)(x, callee);
    if ((0, is_1.isHTMLElement)(x))
        return (0, exports.xRender_element)(x, callee);
    if ((0, exports.isXElement)(x)) {
        if (x.config.render && (0, exports.isXFunction)(x.config.render))
            return (0, exports.xRender)(x.config.render, { state: x.state, args: x.config, x });
        return (0, exports.xRender_x)(x, callee);
    }
    const y = x;
    if (isVNode(y)) {
        if (y.el)
            return (0, exports.xRender_element)(y.el, callee);
        if (y.outerHTML)
            return (0, exports.xRender_string)(y.outerHTML, callee);
        return (0, exports.xRender)("Error", callee);
    }
    return (0, exports.xRender_string)(x.toString ? x.toString() : "?", callee); //JSON.stringify(x), callee);
};
const xRender = (x, callee) => {
    return xRender_(x, callee);
};
exports.xRender = xRender;
const X = (tag, config) => {
    let nextConfig = config;
    if ((0, exports.isXElement)(config)) {
        nextConfig = { children: [config] };
    }
    else if (Array.isArray(config)) {
        nextConfig = { children: config };
    }
    else if ((0, exports.isXFunction)(config)) {
        nextConfig = { render: config };
    }
    const cfg = Object.assign(Object.assign({}, nextConfig), { name: tag });
    const state = (0, reactive_1.xReactive)(cfg.initialState || {}, (target, oldValue, nextValue) => {
        if (!xel.el)
            return;
        const el = xel.el;
        if (!(0, is_1.isHTMLElement)(el))
            return;
        (0, exports.mount)(xel, {
            replace: true,
            target: el,
            callee: {
                state,
                args: cfg,
                el,
                oldValue,
                nextValue
            },
        });
    });
    const genUid = () => {
        const err = new Error();
        const chars = Array.from("abcdefghijklmnopqrstuvwxyz0123456789");
        let h = 0;
        //const auid = (cfg.render ? 'Y' : 'N') + (cfg.children ? cfg.children.length.toString() : '0');
        const cname = cfg.cname || '';
        for (const c of Array.from(JSON.stringify({
            a: cfg.cname,
            b: cfg.name,
            c: (cfg.children || []).length
        }))) {
            let d = (0, hash_1.toUint32)(c.codePointAt(0));
            d ^= d << (0, hash_1.toUint32)(17);
            d ^= d >> (0, hash_1.toUint32)(13);
            d ^= d << (0, hash_1.toUint32)(5);
            d = (0, hash_1.toUint32)(d);
            d *= 7683;
            d = (0, hash_1.toUint32)(d);
            h += d;
            h = (0, hash_1.toUint32)(h);
        }
        h = (0, hash_1.toUint32)((0, hash_1.hashu32)((0, hash_1.toUint32)(h)));
        return (0, array_1.range)(24)
            .map((i) => chars[(0, hash_1.toUint32)(i + h * 45 + (0, hash_1.hashu32)(i + h)) % chars.length])
            .join("");
    };
    const xel = (0, reactive_1.xReactive)({
        config: cfg,
        magic: "x",
        state: state,
        children: [],
        call: (props) => {
            return (0, exports.X)(tag, typeof props === "object" ? Object.assign(Object.assign({}, cfg), props) : cfg);
        },
        uid: genUid(),
        getParent: () => undefined
    });
    return xel;
};
exports.X = X;
const mount = (x, options) => {
    const callee = Object.assign({}, (options.callee || { state: {} }));
    if ((0, exports.isXElement)(x)) {
        callee.x = x;
    }
    const target = options.target;
    let el = undefined;
    el = (0, exports.xRender)(x, callee);
    if (target) {
        if (options.replace) {
            target.replaceWith(el);
        }
        else {
            target.append(el);
        }
    }
    if ((0, exports.isXElement)(x)) {
        assignElement(x, el);
        //if (x.config.ref) {
        // const cloned = {...x, config: {}};
        // x.config.ref.value = cloned;
        // }
        if (x.config.onMount && (0, exports.isXElementLoaded)(x)) {
            x.config.onMount(x);
        }
        if (x.config.onUpdate && (0, exports.isXElementLoaded)(x)) {
            x.config.onUpdate(x);
        }
    }
    return el;
};
exports.mount = mount;
//# sourceMappingURL=data:application/json;base64,